// - 参与搭建内部 AI赋能平台，探索 AI 技术对研发体系进行专业增强和协同增效
// -负责公司基础平台相关项目前端界面的设计、开发和维护。包括但不限于:一站式应用管理平台、网关自助管理平台等
// -负责建设和完善公司的统一认证和SSO 系统任职要求:
// -3年以上前端相关开发经验，熟悉主流前端技术栈(JS/TS等)，至少精通一款流行前端框架(React/Vue等)
// -拥有构建高质量且经过良好测试的前端应用程序的经验
// - 深刻理解前端工程化，有实战经验
// -持续关注 AI 的新趋势和新工具，评估并推动这些技术在内部平台中的应用

//
// 设计一个网关维护系统需要综合考虑系统的功能需求、用户体验、安全性、可维护性和扩展性。以下是设计网关维护系统的具体步骤：
//
// ### 1. 需求分析
// - **功能需求**：确定网关维护系统需要实现的功能，如设备管理、配置管理、监控告警、日志管理等。
// - **用户需求**：分析不同用户角色的需求，如管理员、运维人员、开发人员等。
// - **安全需求**：确定系统安全标准和合规性要求。
//
// ### 2. 系统架构设计
// - **高可用架构**：设计高可用的系统架构，确保系统的稳定运行。
// - **模块化设计**：将系统分解为多个模块或服务，便于开发和维护。
// - **技术选型**：选择合适的技术栈，包括编程语言、数据库、中间件等。
//
// ### 3. 用户身份与权限管理
// - **用户认证**：实现用户登录和身份验证机制。
// - **权限控制**：设计权限控制策略，确保用户只能访问对应的资源和功能。
//
// ### 4. 网关设备管理
// - **设备注册**：允许新网关设备注册到系统中。
// - **设备列表**：展示所有网关设备的列表和状态。
// - **设备配置**：提供设备配置界面，允许修改设备参数。
//
// ### 5. 配置管理
// - **配置模板**：创建和管理配置模板，便于快速部署。
// - **配置部署**：实现配置的推送和部署到网关设备。
// - **配置版本控制**：管理配置的版本，支持版本回滚。
//
// ### 6. 监控与告警
// - **实时监控**：监控网关设备的状态和性能指标。
// - **告警策略**：设置告警策略，如阈值触发、异常检测等。
// - **告警通知**：在检测到问题时，通过邮件、短信等方式通知相关人员。
//
// ### 7. 日志管理
// - **日志收集**：收集网关设备的日志信息。
// - **日志存储**：设计日志存储方案，如使用数据库或日志服务。
// - **日志查询与分析**：提供日志查询和分析工具，帮助诊断问题。
//
// ### 8. 网络与数据安全
// - **数据加密**：确保数据传输和存储的安全性。
// - **网络安全**：实施网络安全措施，如防火墙、VPN等。
// - **访问控制**：限制对敏感数据和操作的访问。
//
// ### 9. 用户界面设计
// - **交互设计**：设计直观易用的用户界面。
// - **响应式设计**：确保系统在不同设备上均有良好体验。
//
// ### 10. API设计与开发
// - **RESTful API**：设计RESTful API，便于与其他系统集成。
// - **API文档**：编写清晰的API文档，方便开发者使用。
//
// ### 11. 测试
// - **单元测试**：对各个模块进行单元测试。
// - **集成测试**：测试模块间的集成和交互。
// - **性能测试**：评估系统在高负载下的表现。
//
// ### 12. 部署与运维
// - **自动化部署**：实现自动化部署流程。
// - **持续集成/持续部署（CI/CD）**：设置CI/CD流程，提高开发效率。
//
// ### 13. 文档与培训
// - **用户手册**：编写用户手册和操作指南。
// - **开发者文档**：提供API和系统开发的详细文档。
// - **培训计划**：为用户提供培训，帮助他们熟悉系统操作。
//
// ### 14. 法律遵从性与合规性
// - **合规性检查**：确保系统符合相关法律法规。
// - **数据保护**：实施数据保护措施，如GDPR等。
//
// ### 15. 反馈与持续改进
// - **用户反馈**：收集用户反馈，了解系统的优点和不足。
// - **持续改进**：根据反馈不断改进系统功能和用户体验。
//
// 通过遵循上述步骤，可以设计并实现一个功能全面、安全可靠、易于维护和扩展的网关维护系统。


// 统一认证（Unified Authentication）和单点登录（Single Sign-On，简称 SSO）是现代企业信息系统中常见的身份验证解决方案，它们允许用户使用一套凭证在多个应用系统中进行认证。以下是统一认证和SSO设计流程的具体步骤：
//
// ### 1. 需求分析
// - 确定系统范围：明确哪些应用系统将被包含在统一认证体系中。
// - 用户体验目标：定义用户登录流程的期望体验。
// - 安全性要求：分析系统的安全需求，确定数据保护和隐私策略。
//
// ### 2. 架构设计
// - **定义核心组件**：设计SSO系统的核心组件，包括认证服务器、服务提供者、客户端等。
// - **选择认证协议**：根据需求选择合适的认证协议，如OAuth2.0、SAML、OpenID Connect等。
// - **数据流设计**：设计用户认证和授权的数据流，确保数据在各组件间安全传输。
//
// ### 3. 用户身份管理
// - **用户数据库设计**：设计存储用户凭证和属性的数据库结构。
// - **身份验证机制**：实现用户名和密码、多因素认证等身份验证机制。
//
// ### 4. 认证服务器实现
// - **认证接口**：开发用户登录、Token生成和验证等认证接口。
// - **安全措施**：实现SSL/TLS加密、XSS和CSRF防护等安全措施。
//
// ### 5. 服务集成
// - **服务提供者配置**：配置各个服务提供者以信任认证服务器并接收认证信息。
// - **客户端适配**：确保客户端能够与SSO系统交互，如通过重定向或API调用。
//
// ### 6. 会话管理
// - **会话创建**：用户登录后，创建会话并生成会话标识符（如Session ID或JWT Token）。
// - **会话存储**：选择合适的存储机制，如内存、数据库或分布式缓存（如Redis）。
//
// ### 7. 跨域与跨平台支持
// - **跨域策略**：设计跨域访问控制策略，如CORS配置。
// - **跨平台适配**：确保SSO系统支持不同平台和设备，包括Web、桌面和移动应用。
//
// ### 8. 安全性保障
// - **令牌安全性**：确保令牌具有防篡改和过期机制。
// - **审计与监控**：实现系统访问和操作的日志记录与审计功能。
//
// ### 9. 测试
// - **功能测试**：验证SSO系统的所有功能是否按预期工作。
// - **性能测试**：评估系统在高负载下的表现。
// - **安全测试**：进行渗透测试和漏洞扫描。
//
// ### 10. 部署与维护
// - **系统部署**：将SSO系统部署到生产环境。
// - **用户培训**：对用户进行系统使用培训。
// - **持续监控**：监控系统运行状态，及时响应可能出现的问题。
//
// ### 11. 文档与支持
// - **用户手册**：编写用户手册和操作指南。
// - **开发者文档**：提供API文档和开发者指南。
// - **技术支持**：建立技术支持渠道，为用户提供帮助。
//
// ### 12. 法律遵从性与合规性
// - **合规性检查**：确保系统符合相关的法律法规要求。
// - **数据保护**：实施数据保护措施，如GDPR等。
//
// 通过遵循上述设计流程，可以建立一个高效、安全且用户友好的统一认证和SSO系统。




// 选择购买第三方提供的单点登录（SSO）解决方案而不是自研的原因可能包括：
//
// 1. **专业性**：
//    - 第三方SSO提供商通常专注于身份认证领域，拥有专业的知识和丰富的经验。
//
// 2. **成本效益**：
//    - 自研SSO可能需要投入大量的开发、测试和维护资源，而第三方解决方案可以降低这些成本。
//
// 3. **快速部署**：
//    - 使用第三方SSO可以快速部署，而自研解决方案可能需要较长的开发周期。
//
// 4. **维护和支持**：
//    - 商业SSO解决方案通常提供持续的技术支持和维护服务，减轻了企业自身的维护负担。
//
// 5. **安全性**：
//    - 第三方SSO提供商通常会遵循严格的安全标准和合规性要求，提供更高安全级别的解决方案。
//
// 6. **兼容性**：
//    - 第三方解决方案通常具有良好的兼容性，可以轻松集成多种应用程序和服务。
//
// 7. **功能丰富**：
//    - 商业SSO解决方案可能提供更丰富的功能，如多因素认证、细粒度访问控制等。
//
// 8. **风险管理**：
//    - 购买第三方服务可以分散自研可能带来的技术风险和安全风险。
//
// 9. **市场验证**：
//    - 第三方SSO解决方案通常经过市场验证，有更多的用户和案例支持其可靠性。
//
// 10. **法律遵从性**：
//     - 第三方服务提供商通常更熟悉数据保护法规，如GDPR，可以确保合规性。
//
// 11. **集成新兴技术**：
//     - 第三方SSO解决方案可能更容易集成新兴技术，如区块链、生物识别等。
//
// 12. **定制化服务**：
//     - 一些第三方提供商提供定制化服务，以满足特定业务需求。
//
// 13. **社区和生态系统**：
//     - 第三方解决方案可能拥有更广泛的社区和生态系统支持。
//
// 然而，选择购买第三方SSO解决方案还是自研，最终取决于组织的具体需求、资源、预算和战略目标。对于一些有特殊安全要求或需要高度定制化的企业，自研可能是更合适的选择。在做出决策时，应该综合考虑长期和短期的利益。
//







// 1.
// PageA
// [
//   A,
//   B,
//   C,
// ]
//   [
//   A1,
//     B,
//     C,
//   ],
//   [
//   A2,
//     B,
//     C,
//   ]
//
// code === A // PageA
// code === B // PageB

// 后管 pageConfig

// 2. abc是否是回文

const isHuiwen = (str) => {
  let start = 0
  let end = str.length - 1
  while(start <= end) {
    if(str[start] === str[end]) {
      start ++
      end --
    } else {
      return false
    }
  }
  return true
}

console.log(isHuiwen('aba'))
console.log(isHuiwen('ab'))

// 链表 val => a =>next =>b
// val, pNext, pRandom

const cloneLinkList = (LinkList, res) => {
  // while(LinkList.pNext) {
  //   res.val = LinkList.val
  //   res.setPRandom(cloneLinkList(LinkList.getPRandom()))
  //   res.pNext = cloneLinkList(LinkList.pNext)
  // }
  // return res

  while(LinkList.pNext) {
    // res.val = LinkList.val
    // res.setPRandom(cloneLinkList(LinkList.getPRandom()))
    // res.pNext = cloneLinkList(LinkList.pNext)
  }
}

// 时针、分针
const getJiajiao = (time) => {
  const formattedTime = new Date(time)
  let hour = formattedTime.getHours()
  hour = hour > 12 ? hour - 12 : hour;
  const minute = formattedTime.getMinutes()
  const jiajiaoMinute = minute / 60 * 360
  const jiajiaoHour = (hour + (minute / 60))/ 12 * 360
  return Math.abs(jiajiaoMinute - jiajiaoHour)
}

